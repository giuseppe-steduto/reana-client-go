// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetWorkflowStatusReader is a Reader for the GetWorkflowStatus structure.
type GetWorkflowStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWorkflowStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkflowStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWorkflowStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/workflows/{workflow_id_or_name}/status] get_workflow_status", response, response.Code())
	}
}

// NewGetWorkflowStatusOK creates a GetWorkflowStatusOK with default headers values
func NewGetWorkflowStatusOK() *GetWorkflowStatusOK {
	return &GetWorkflowStatusOK{}
}

/*
GetWorkflowStatusOK describes a response with status code 200, with default header values.

Request succeeded. Info about a workflow, including the status is returned.
*/
type GetWorkflowStatusOK struct {
	Payload *GetWorkflowStatusOKBody
}

// IsSuccess returns true when this get workflow status o k response has a 2xx status code
func (o *GetWorkflowStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflow status o k response has a 3xx status code
func (o *GetWorkflowStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow status o k response has a 4xx status code
func (o *GetWorkflowStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow status o k response has a 5xx status code
func (o *GetWorkflowStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow status o k response a status code equal to that given
func (o *GetWorkflowStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflow status o k response
func (o *GetWorkflowStatusOK) Code() int {
	return 200
}

func (o *GetWorkflowStatusOK) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowStatusOK) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowStatusOK) GetPayload() *GetWorkflowStatusOKBody {
	return o.Payload
}

func (o *GetWorkflowStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowStatusBadRequest creates a GetWorkflowStatusBadRequest with default headers values
func NewGetWorkflowStatusBadRequest() *GetWorkflowStatusBadRequest {
	return &GetWorkflowStatusBadRequest{}
}

/*
GetWorkflowStatusBadRequest describes a response with status code 400, with default header values.

Request failed. The incoming payload seems malformed.
*/
type GetWorkflowStatusBadRequest struct {
	Payload *GetWorkflowStatusBadRequestBody
}

// IsSuccess returns true when this get workflow status bad request response has a 2xx status code
func (o *GetWorkflowStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow status bad request response has a 3xx status code
func (o *GetWorkflowStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow status bad request response has a 4xx status code
func (o *GetWorkflowStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow status bad request response has a 5xx status code
func (o *GetWorkflowStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow status bad request response a status code equal to that given
func (o *GetWorkflowStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get workflow status bad request response
func (o *GetWorkflowStatusBadRequest) Code() int {
	return 400
}

func (o *GetWorkflowStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetWorkflowStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetWorkflowStatusBadRequest) GetPayload() *GetWorkflowStatusBadRequestBody {
	return o.Payload
}

func (o *GetWorkflowStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowStatusBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowStatusForbidden creates a GetWorkflowStatusForbidden with default headers values
func NewGetWorkflowStatusForbidden() *GetWorkflowStatusForbidden {
	return &GetWorkflowStatusForbidden{}
}

/*
GetWorkflowStatusForbidden describes a response with status code 403, with default header values.

Request failed. User is not allowed to access workflow.
*/
type GetWorkflowStatusForbidden struct {
	Payload *GetWorkflowStatusForbiddenBody
}

// IsSuccess returns true when this get workflow status forbidden response has a 2xx status code
func (o *GetWorkflowStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow status forbidden response has a 3xx status code
func (o *GetWorkflowStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow status forbidden response has a 4xx status code
func (o *GetWorkflowStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow status forbidden response has a 5xx status code
func (o *GetWorkflowStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow status forbidden response a status code equal to that given
func (o *GetWorkflowStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workflow status forbidden response
func (o *GetWorkflowStatusForbidden) Code() int {
	return 403
}

func (o *GetWorkflowStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkflowStatusForbidden) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkflowStatusForbidden) GetPayload() *GetWorkflowStatusForbiddenBody {
	return o.Payload
}

func (o *GetWorkflowStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowStatusForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowStatusNotFound creates a GetWorkflowStatusNotFound with default headers values
func NewGetWorkflowStatusNotFound() *GetWorkflowStatusNotFound {
	return &GetWorkflowStatusNotFound{}
}

/*
GetWorkflowStatusNotFound describes a response with status code 404, with default header values.

Request failed. Either User or Analysis does not exist.
*/
type GetWorkflowStatusNotFound struct {
	Payload *GetWorkflowStatusNotFoundBody
}

// IsSuccess returns true when this get workflow status not found response has a 2xx status code
func (o *GetWorkflowStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow status not found response has a 3xx status code
func (o *GetWorkflowStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow status not found response has a 4xx status code
func (o *GetWorkflowStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow status not found response has a 5xx status code
func (o *GetWorkflowStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow status not found response a status code equal to that given
func (o *GetWorkflowStatusNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflow status not found response
func (o *GetWorkflowStatusNotFound) Code() int {
	return 404
}

func (o *GetWorkflowStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkflowStatusNotFound) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkflowStatusNotFound) GetPayload() *GetWorkflowStatusNotFoundBody {
	return o.Payload
}

func (o *GetWorkflowStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowStatusNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowStatusInternalServerError creates a GetWorkflowStatusInternalServerError with default headers values
func NewGetWorkflowStatusInternalServerError() *GetWorkflowStatusInternalServerError {
	return &GetWorkflowStatusInternalServerError{}
}

/*
GetWorkflowStatusInternalServerError describes a response with status code 500, with default header values.

Request failed. Internal controller error.
*/
type GetWorkflowStatusInternalServerError struct {
	Payload *GetWorkflowStatusInternalServerErrorBody
}

// IsSuccess returns true when this get workflow status internal server error response has a 2xx status code
func (o *GetWorkflowStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow status internal server error response has a 3xx status code
func (o *GetWorkflowStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow status internal server error response has a 4xx status code
func (o *GetWorkflowStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow status internal server error response has a 5xx status code
func (o *GetWorkflowStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get workflow status internal server error response a status code equal to that given
func (o *GetWorkflowStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get workflow status internal server error response
func (o *GetWorkflowStatusInternalServerError) Code() int {
	return 500
}

func (o *GetWorkflowStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkflowStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/workflows/{workflow_id_or_name}/status][%d] getWorkflowStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkflowStatusInternalServerError) GetPayload() *GetWorkflowStatusInternalServerErrorBody {
	return o.Payload
}

func (o *GetWorkflowStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowStatusInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetWorkflowStatusBadRequestBody get workflow status bad request body
swagger:model GetWorkflowStatusBadRequestBody
*/
type GetWorkflowStatusBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow status bad request body
func (o *GetWorkflowStatusBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status bad request body based on context it is used
func (o *GetWorkflowStatusBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusForbiddenBody get workflow status forbidden body
swagger:model GetWorkflowStatusForbiddenBody
*/
type GetWorkflowStatusForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow status forbidden body
func (o *GetWorkflowStatusForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status forbidden body based on context it is used
func (o *GetWorkflowStatusForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusInternalServerErrorBody get workflow status internal server error body
swagger:model GetWorkflowStatusInternalServerErrorBody
*/
type GetWorkflowStatusInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow status internal server error body
func (o *GetWorkflowStatusInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status internal server error body based on context it is used
func (o *GetWorkflowStatusInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusNotFoundBody get workflow status not found body
swagger:model GetWorkflowStatusNotFoundBody
*/
type GetWorkflowStatusNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get workflow status not found body
func (o *GetWorkflowStatusNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status not found body based on context it is used
func (o *GetWorkflowStatusNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusOKBody get workflow status o k body
swagger:model GetWorkflowStatusOKBody
*/
type GetWorkflowStatusOKBody struct {

	// created
	Created string `json:"created,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// logs
	Logs string `json:"logs,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// progress
	Progress *GetWorkflowStatusOKBodyProgress `json:"progress,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this get workflow status o k body
func (o *GetWorkflowStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowStatusOKBody) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(o.Progress) { // not required
		return nil
	}

	if o.Progress != nil {
		if err := o.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get workflow status o k body based on the context it is used
func (o *GetWorkflowStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowStatusOKBody) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if o.Progress != nil {

		if swag.IsZero(o.Progress) { // not required
			return nil
		}

		if err := o.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusOKBodyProgress get workflow status o k body progress
swagger:model GetWorkflowStatusOKBodyProgress
*/
type GetWorkflowStatusOKBodyProgress struct {

	// current command
	CurrentCommand *string `json:"current_command,omitempty"`

	// current step name
	CurrentStepName *string `json:"current_step_name,omitempty"`

	// failed
	Failed *GetWorkflowStatusOKBodyProgressFailed `json:"failed,omitempty"`

	// finished
	Finished *GetWorkflowStatusOKBodyProgressFinished `json:"finished,omitempty"`

	// run finished at
	RunFinishedAt *string `json:"run_finished_at,omitempty"`

	// run started at
	RunStartedAt *string `json:"run_started_at,omitempty"`

	// run stopped at
	RunStoppedAt *string `json:"run_stopped_at,omitempty"`

	// running
	Running *GetWorkflowStatusOKBodyProgressRunning `json:"running,omitempty"`

	// total
	Total *GetWorkflowStatusOKBodyProgressTotal `json:"total,omitempty"`
}

// Validate validates this get workflow status o k body progress
func (o *GetWorkflowStatusOKBodyProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinished(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRunning(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(o.Failed) { // not required
		return nil
	}

	if o.Failed != nil {
		if err := o.Failed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "failed")
			}
			return err
		}
	}

	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) validateFinished(formats strfmt.Registry) error {
	if swag.IsZero(o.Finished) { // not required
		return nil
	}

	if o.Finished != nil {
		if err := o.Finished.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "finished")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "finished")
			}
			return err
		}
	}

	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) validateRunning(formats strfmt.Registry) error {
	if swag.IsZero(o.Running) { // not required
		return nil
	}

	if o.Running != nil {
		if err := o.Running.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "running")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "running")
			}
			return err
		}
	}

	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) validateTotal(formats strfmt.Registry) error {
	if swag.IsZero(o.Total) { // not required
		return nil
	}

	if o.Total != nil {
		if err := o.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "total")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "total")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get workflow status o k body progress based on the context it is used
func (o *GetWorkflowStatusOKBodyProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFinished(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRunning(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	if o.Failed != nil {

		if swag.IsZero(o.Failed) { // not required
			return nil
		}

		if err := o.Failed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "failed")
			}
			return err
		}
	}

	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) contextValidateFinished(ctx context.Context, formats strfmt.Registry) error {

	if o.Finished != nil {

		if swag.IsZero(o.Finished) { // not required
			return nil
		}

		if err := o.Finished.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "finished")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "finished")
			}
			return err
		}
	}

	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) contextValidateRunning(ctx context.Context, formats strfmt.Registry) error {

	if o.Running != nil {

		if swag.IsZero(o.Running) { // not required
			return nil
		}

		if err := o.Running.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "running")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "running")
			}
			return err
		}
	}

	return nil
}

func (o *GetWorkflowStatusOKBodyProgress) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if o.Total != nil {

		if swag.IsZero(o.Total) { // not required
			return nil
		}

		if err := o.Total.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "total")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getWorkflowStatusOK" + "." + "progress" + "." + "total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgress) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusOKBodyProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusOKBodyProgressFailed get workflow status o k body progress failed
swagger:model GetWorkflowStatusOKBodyProgressFailed
*/
type GetWorkflowStatusOKBodyProgressFailed struct {

	// job ids
	JobIds []string `json:"job_ids"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get workflow status o k body progress failed
func (o *GetWorkflowStatusOKBodyProgressFailed) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status o k body progress failed based on context it is used
func (o *GetWorkflowStatusOKBodyProgressFailed) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressFailed) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressFailed) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusOKBodyProgressFailed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusOKBodyProgressFinished get workflow status o k body progress finished
swagger:model GetWorkflowStatusOKBodyProgressFinished
*/
type GetWorkflowStatusOKBodyProgressFinished struct {

	// job ids
	JobIds []string `json:"job_ids"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get workflow status o k body progress finished
func (o *GetWorkflowStatusOKBodyProgressFinished) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status o k body progress finished based on context it is used
func (o *GetWorkflowStatusOKBodyProgressFinished) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressFinished) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressFinished) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusOKBodyProgressFinished
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusOKBodyProgressRunning get workflow status o k body progress running
swagger:model GetWorkflowStatusOKBodyProgressRunning
*/
type GetWorkflowStatusOKBodyProgressRunning struct {

	// job ids
	JobIds []string `json:"job_ids"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get workflow status o k body progress running
func (o *GetWorkflowStatusOKBodyProgressRunning) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status o k body progress running based on context it is used
func (o *GetWorkflowStatusOKBodyProgressRunning) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressRunning) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressRunning) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusOKBodyProgressRunning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetWorkflowStatusOKBodyProgressTotal get workflow status o k body progress total
swagger:model GetWorkflowStatusOKBodyProgressTotal
*/
type GetWorkflowStatusOKBodyProgressTotal struct {

	// job ids
	JobIds []string `json:"job_ids"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get workflow status o k body progress total
func (o *GetWorkflowStatusOKBodyProgressTotal) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get workflow status o k body progress total based on context it is used
func (o *GetWorkflowStatusOKBodyProgressTotal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressTotal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowStatusOKBodyProgressTotal) UnmarshalBinary(b []byte) error {
	var res GetWorkflowStatusOKBodyProgressTotal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
